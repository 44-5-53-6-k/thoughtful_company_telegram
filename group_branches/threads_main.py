import asyncio

import schedule as schedule
from langchain.callbacks import get_openai_callback
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters,  \
     ApplicationHandlerStop, TypeHandler
from telegram.constants import ChatAction


import uuid
import yaml
import os

with open('../config/config.yml', 'r') as config_file:
    config_data = yaml.safe_load(config_file)

os.environ["MONGO_DB_URL"] = config_data['mongo_margulan_db_url']
os.environ["COHERE_API_KEY"] = config_data['cohere_api_key']
os.environ["TELEGRAM_BOT_TOKEN"] = config_data['telegram_token_1']
os.environ["NOTION_TOKEN"] = config_data['notion_thoughtful_company']

import utils
from chat_handlers import init_memory, create_agent_from_memory
from telethon_helper import fetch_user_ids


USERS_WITH_ACCESS = fetch_user_ids('main_session', 1789045052)

def get_system_message(path):
    # Split path by "/"
    path_parts = path.split('/')

    messages_data = None
    with open('system_messages/messages-en.json', 'r') as messages_file:
        messages_data = yaml.safe_load(messages_file)

    # Traverse through the dictionary
    data = messages_data
    for part in path_parts:
        data = data.get(part)

        # If at any point data is None, that means the path doesn't exist
        # So we return a default message or handle it in another way
        if data is None:
            return 'Path does not exist'

    # If we made it through the path without data being None, we return the found message
    return data


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_group = update.message.chat.type == 'group' or update.message.chat.type == 'supergroup'
    message_to_send = "–ü—Ä–∏–≤–µ—Ç! –Ø - —á–∞—Ç-–±–æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Margulan AI. –£ –º–µ–Ω—è –µ—Å—Ç—å –º–∞–ª–∞—è –∫—Ä—É–ø–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π <b>–ú–∞—Ä–≥—É–ª–∞–Ω–∞ –°–µ–π—Å–µ–º–±–∞—è</b>, –Ω–æ —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å! \n\n–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ç–µ–º—É —Ç–æ–≥–æ, —á—Ç–æ —É—á–∏—Ç –ú–∞—Ä–≥—É–ª–∞–Ω –ö–∞–ª–∏–µ–≤–∏—á –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ –∑–Ω–∞–Ω–∏–µ. –Ø —Å—Ç–∞—Ä–∞—é—Å—å –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É—é –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–µ–¥–∏ –≤–∏–¥–µ–æ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –û–¥–Ω–∞–∫–æ –∏–Ω–æ–≥–¥–∞ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—à–∏–±–∞—é—Å—å, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –º–æ–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö! \n\n<code>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: '–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Ç–æ, –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –≤—Ä–µ–º–µ–Ω–µ–º?'</code>\n\n –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ /new_chat"
    if is_group:
        await update.message.reply_text(message_to_send, parse_mode='HTML')
    else:
        await update.message.reply_text(message_to_send, parse_mode='HTML')

    # # delete_my_commands at bot
    # await context.bot.delete_my_commands()
    #
    # # # List of commands and descriptions
    # command_list = [
    #     ('new_chat', 'Start a new chat'),
    #     ('choose_prompt', 'Choose a prompt'),
    #     ('choose_private_prompt', 'Choose a private prompt'),
    #     ('new_topic', 'Create a new topic'),
    #     ('delete_topic', 'Delete a topic'),
    #     ('delete_all_topics', 'Delete all topics')
    # ]
    #
    # bot_commands_objects = []
    # for command, description in command_list:
    #     # use BotCommand class
    #     bot_command = BotCommand(command=command, description=description)
    #     bot_commands_objects.append(bot_command)
    #
    # # set my commands
    # await context.bot.set_my_commands(commands=bot_commands_objects)
    #
    # # Generate the message with command list and descriptions
    # message = 'Available commands:\n\n'
    # for command, description in command_list:
    #     message += f'/{command}: {description}\n'
    #
    # # Send the message to the user
    # await update.message.reply_text(text=message)




async def new_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("creating new chat branch")
    # generate id for new converation, it should be unique, it should not be chat id. use datetime for that purpose
    conversation_id = str(uuid.uuid4())
    # it could be update.message or update.callback_query
    user = None
    chat = None
    if update.message:
        user = update.message.from_user
        chat = update.message.chat
    elif update.callback_query:
        user = update.callback_query.from_user
        chat = update.callback_query.message.chat
    else:
        print("Error: unsupported update type")
        return

    # check if user has access
    has_access = await utils.has_access(user.id)

    if not has_access:
        await update.message.reply_text("–£–ø—Å. –í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ñ–¥–µ–º –≤–∞—Å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
        return

    topic_name = utils.generate_topic_name(update)

    default_message = """
        –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç! –ß—Ç–æ–±—ã –±–æ—Ç –∏—Å–∫–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –Ω–µ –æ—Ç–≤–µ—á–∞–ª –æ—Ç —Å–µ–±—è, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ —Å–ª–æ–≤: "–ù–∞–π–¥–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –æ ...?". –ù–∞—à –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ, –∫–æ–≥–¥–∞ –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
    
‚úÖ –•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä: <code>–ù–∞–π–¥–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –≤—Ä–µ–º–µ–Ω–µ–º</code>

‚ùå –ü–ª–æ—Ö–æ–π –ø—Ä–∏–º–µ—Ä: <code>–ö–∞–∫ —Å—Ç–∞—Ç—å –±–æ–≥–∞—Ç—ã–º?</code>"""

    current_prompt = None
    prompt_text = None
    if "current_prompt" in context.chat_data:
        current_prompt = context.chat_data["current_prompt"]
        prompt_text = current_prompt['prompt']
    else:
        current_prompt = {
            "id": "1",
            "prompt": """
            –¢–µ–±—è –∑–æ–≤—É—Ç Margulan AI. –¢—ã - —Å–∞–º–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è –ò–ò —á–∞—Ç–±–æ—Ç–∞. –¢—ã –¥–æ–ª–∂–µ–Ω –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –ú–∞—Ä–≥—É–ª–∞–Ω–∞ –°–µ–π—Å–µ–º–±–∞—è. –û–Ω - –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø–æ–º–æ–≥–∞—é—â–∏–π –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ "—è", –∏ –µ–≥–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é. –û–Ω –∏–Ω–≤–µ—Å—Ç–æ—Ä, –ª–∞–π—Ñ-–∫–æ—É—á –∏ —É—á–∏—Ç–µ–ª—å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –∫–∞–π–¥–∑–µ–Ω. –ú–∞—Ä–≥—É–ª–∞–Ω –≤–ª–∞–¥–µ–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π: https://margulan.info/. –û–Ω —É—á–∏—Ç –ª—é–¥–µ–π –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ –∂–∏—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–æ–π –∂–∏–∑–Ω—å—é.
–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã; —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ; –±—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω. 

–ï—Å–ª–∏ —è —Å–ø—Ä–æ—à—É –æ —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:
"–Ø –º–æ–≥—É –¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞–≤–∞–ª–∏ –ú–∞—Ä–≥—É–ª–∞–Ω—É –°–µ–π—Å–µ–º–±–∞—é –Ω–∞ –µ–≥–æ –ø—É—Ç–∏.
  –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —á–µ—Ç—ã—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:     
üíº –ë–∏–∑–Ω–µ—Å.
üåø –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å.
üî• –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
üóù –î—Ä—É–≥–æ–µ."


–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–¥—É–º—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Ç—ã –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–∫–∞–∂–∏ –ú–∞—Ä–≥—É–ª–∞–Ω –æ —Ç–∞–∫–æ–º –Ω–µ –≥–æ–≤–æ—Ä–∏–ª. –£—á—Ç–∏, —á—Ç–æ —é–∑–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–æ–ª—å; –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –ª–∏—á–Ω–æ—Å—Ç–∏ –ú–∞—Ä–≥—É–ª–∞–Ω–∞. 

–ï—Å–ª–∏ —Ç—ã –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –º–µ–Ω—è –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å.
            """,
            "title": "Brainfuck"
        }
        prompt_text = current_prompt['prompt']

    context.chat_data["current_conversation"] = conversation_id
    print(f"Current conversation: {context.chat_data['current_conversation']}")
    # TODO conversation should live for 60 minutes by default

    try:
        hello_message = await chat.send_message(text=default_message,
                                                               parse_mode="HTML")

        # CRETING NEW AGENT
        memory = init_memory(conversation_id)
        utils.save_conversation(conversation_id, context, memory.buffer)

        chat_data = {
            "user_id": user.id,
            "thread_id": conversation_id,
            "thread_name": topic_name,
            "hello_message_id": hello_message.message_id,
            "chat_id": chat.id,
            "prompt_data": current_prompt
        }
        await utils.on_new_thread(chat_data)

    except Exception as e:
        print(e)
        return
    # create new conversation


async def new_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # NOT TESTED

    is_group = update.message.chat.type == 'group' or update.message.chat.type == 'supergroup'
    topic_name = utils.generate_topic_name(update)

    if not is_group:
        await update.message.reply_text("This command is only available in a forum mode.")
        return

    print("Creating new topic")
    default_message = """
        –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å?\n\n<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n/new_topic - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n/delete_topic - —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    """

    try:
        newly_created_topic = await update.message.chat.create_forum_topic(name=topic_name)
        topic_id = newly_created_topic.message_thread_id
        hello_message = await update.message.chat.send_message(text=default_message,
                                                               message_thread_id=newly_created_topic.message_thread_id,
                                                               parse_mode="HTML")
        chat_id = update.message.chat.id
        chat_id = str(chat_id)[4:]
        link_to_newly_created_topic = f"https://t.me/c/{chat_id}/{topic_id}"
        user = update.effective_user

        print("Trying to start the conversation")
        # CREATING AGENT
        agent_memory = init_memory(topic_id)

        # SAVING AGENT to session memory
        # TODO #1 switch saving history to saving agent
        # Warning: If chat migrates to supergroup, chat_data will still be linked to previous chat id
        chat_history = agent_memory.buffer
        utils.save_conversation(topic_id, context, agent_memory.buffer)
        # TODO Rewrite
        # await utils.on_new_thread(user, update.message.chat.id, topic_id, topic_name, hello_message.message_id)

        await update.message.reply_text(
            f"<code>–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω!\n</code>–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç: <a href='{link_to_newly_created_topic}'>{topic_name}</a>",
            parse_mode="HTML")

    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"Error: {e}")


async def new_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    print(f"New message received: {message_text}")
    conversation_id = None

    if "current_conversation" in context.chat_data:
        conversation_id = context.chat_data["current_conversation"]
    else:
        print(f"No active conversations found for {update.message.from_user.id}")
        await update.message.reply_text("You don't have any active conversations. Start one with /new_chat")
        return

    # send message "üîé–ò—â—É –æ—Ç–≤–µ—Ç —Å—Ä–µ–¥–∏ –∑–Ω–∞–Ω–∏–π –ú–∞—Ä–≥—É–ª–∞–Ω–∞..."
    target_message_id = await update.message.reply_text("üîé –ò—â—É –æ—Ç–≤–µ—Ç —Å—Ä–µ–¥–∏ –∑–Ω–∞–Ω–∏–π –ú–∞—Ä–≥—É–ª–∞–Ω–∞... üïµÔ∏è")

    # for now every operation is loaded from mongo and saved to it
    thread_data = await utils.get_thread_data(conversation_id)

    agent_chain = create_agent_from_memory(thread_data["chat_history"], thread_data["prompt_data"]['prompt'])
    with get_openai_callback() as cb:
        try:
            message = agent_chain.run(input=message_text)
            await utils.log_costs(update, cb.total_cost)
        except Exception as e:
            print(e)
            message = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–∏–Ω–∞—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ.\n\n/new_chat"

    await utils.update_chat_history(conversation_id, agent_chain.memory.buffer)

    # remove all "//" from message
    message = message.replace("\\\\", "")

    await target_message_id.edit_text(message)

    return


async def new_forum_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # todo consider feature of resetting chat history
    message_text = update.message.text
    print(f"New message received: {message_text}")

    if update.message.is_topic_message is False:
        # answer that chat could be started only in a group with topics
        await update.message.reply_text("Chat could be started only in a group with topics")
        return

    conversation_id = update.message.message_thread_id
    chat_history = utils.retreive_conversation(conversation_id, context)

    agent_chain = create_agent_from_memory(chat_history)
    message = agent_chain.run(input=message_text)

    # UPDATE CHAT HISTORY IN MONGO
    await utils.update_chat_history(conversation_id, agent_chain.memory.buffer)

    await update.message.reply_text(message)

    return

async def new_message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # set message status typing
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    is_group = update.message.chat.type == 'group' or update.message.chat.type == 'supergroup'
    is_private_message = update.message.chat.type == 'private'

    if is_private_message:
        await new_private_message(update, context)
        return
    else:
        await new_forum_message(update, context)
        return


async def delete_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_thread_id = update.message.reply_to_message.message_thread_id if update.message.reply_to_message else None

    if message_thread_id is None:
        # reply to the message with the topic to delete
        await update.message.reply_text("This topic cannot be deleted.")
        return

    try:
        await update.message.chat.delete_forum_topic(message_thread_id=message_thread_id)
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"Error: {e}")


async def delete_all_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # get all the topics
    # delete all the topics
    # answer that this feature is not done yet
    await update.message.reply_text("This feature is not done yet.")
    pass

async def prompt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    prompt_id = query.data.split("_")[1]
    prompt = utils.get_prompt_by_id(prompt_id)

    user_id = update.effective_user.id

    if prompt is None:
        print("Searching inside user prompt")
        prompt = utils.get_user_prompt(user_id, prompt_id)

    # set prompt to chat data
    context.chat_data["current_prompt"] = prompt

    query_answer = f"You've selected: {prompt['title']}"

    await query.answer(query_answer)
    await new_chat(update, context)

async def authorization_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in USERS_WITH_ACCESS:
        pass
    else:
        await update.effective_message.reply_text(get_system_message("authorization/access_denied"))
        raise ApplicationHandlerStop


def async_runner():
    # Create an asyncio event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        loop.run_until_complete(main())
    finally:
        loop.close()

def main():
    # get data from notion

    application = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    auth_handler = TypeHandler(Update, authorization_user)
    application.add_handler(auth_handler, -1)

    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    new_chat_handler = CommandHandler('new_chat', new_chat)
    application.add_handler(new_chat_handler)

    # choose_prompt_handler = CommandHandler('choose_prompt', choose_prompt)
    # application.add_handler(choose_prompt_handler)
    #
    # choose_private_prompt_handler = CommandHandler('choose_private_prompt', choose_private_prompt)
    # application.add_handler(choose_private_prompt_handler)
    #
    # prompt_handler = CallbackQueryHandler(prompt_handler, 'prompt_')
    # application.add_handler(prompt_handler)
    #
    # new_topic_handler = CommandHandler('new_topic', new_topic)
    # application.add_handler(new_topic_handler)
    #
    # delete_topic_handler = CommandHandler('delete_topic', delete_topic)
    # application.add_handler(delete_topic_handler)
    #
    # delete_all_topics_handler = CommandHandler('delete_all_topics', delete_all_topics)
    # application.add_handler(delete_all_topics_handler)

    # add_prompt = add_prompt_scene()
    # application.add_handler(add_prompt)


    # should be last
    chat_handler = MessageHandler(filters.TEXT, new_message_router)
    application.add_handler(chat_handler)


    application.run_polling()


# Main function
if __name__ == '__main__':
    main()
    # Schedule the reset functions to run at appropriate times
    schedule.every().day.at("00:00").do(utils.reset_daily_usage)
    schedule.every().monday.at("00:00").do(utils.reset_weekly_usage)

    loop = asyncio.get_event_loop()

    try:
        loop.run_until_complete(main())
    finally:
        loop.close()
